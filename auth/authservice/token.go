// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "auth": token Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit/auth
// --pkg=authservice
// --version=v1.2.0

package authservice

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// GenerateTokenPath computes a request path to the generate action of token.
func GenerateTokenPath() string {

	return fmt.Sprintf("/api/token/generate")
}

// Generate a set of Tokens for different Auth levels. NOT FOR PRODUCTION. Only available if server is running in dev mode
func (c *Client) GenerateToken(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGenerateTokenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGenerateTokenRequest create the request corresponding to the generate action endpoint of the token resource.
func (c *Client) NewGenerateTokenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RefreshTokenPath computes a request path to the refresh action of token.
func RefreshTokenPath() string {

	return fmt.Sprintf("/api/token/refresh")
}

// Refresh access token
func (c *Client) RefreshToken(ctx context.Context, path string, payload *RefreshToken) (*http.Response, error) {
	req, err := c.NewRefreshTokenRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRefreshTokenRequest create the request corresponding to the refresh action endpoint of the token resource.
func (c *Client) NewRefreshTokenRequest(ctx context.Context, path string, payload *RefreshToken) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}
