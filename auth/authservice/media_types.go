// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "auth": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit/auth
// --pkg=authservice
// --version=v1.2.0

package authservice

import (
	"github.com/goadesign/goa"
	"net/http"
)

// JWT Token (default view)
//
// Identifier: application/vnd.authtoken+json; view=default
type AuthToken struct {
	Token *TokenData `form:"token" json:"token" xml:"token"`
}

// Validate validates the AuthToken media type instance.
func (mt *AuthToken) Validate() (err error) {
	if mt.Token == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}
	return
}

// DecodeAuthToken decodes the AuthToken instance encoded in resp body.
func (c *Client) DecodeAuthToken(resp *http.Response) (*AuthToken, error) {
	var decoded AuthToken
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AuthTokenCollection is the media type for an array of AuthToken (default view)
//
// Identifier: application/vnd.authtoken+json; type=collection; view=default
type AuthTokenCollection []*AuthToken

// Validate validates the AuthTokenCollection media type instance.
func (mt AuthTokenCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAuthTokenCollection decodes the AuthTokenCollection instance encoded in resp body.
func (c *Client) DecodeAuthTokenCollection(resp *http.Response) (AuthTokenCollection, error) {
	var decoded AuthTokenCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JSONAPIErrors media type (default view)
//
// Identifier: application/vnd.jsonapierrors+json; view=default
type JSONAPIErrors struct {
	Errors []*JSONAPIError `form:"errors" json:"errors" xml:"errors"`
}

// Validate validates the JSONAPIErrors media type instance.
func (mt *JSONAPIErrors) Validate() (err error) {
	if mt.Errors == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "errors"))
	}
	for _, e := range mt.Errors {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeJSONAPIErrors decodes the JSONAPIErrors instance encoded in resp body.
func (c *Client) DecodeJSONAPIErrors(resp *http.Response) (*JSONAPIErrors, error) {
	var decoded JSONAPIErrors
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Space Resource (default view)
//
// Identifier: application/vnd.spaceresource+json; view=default
type SpaceResource struct {
	Data *SpaceResourceData `form:"data" json:"data" xml:"data"`
}

// Validate validates the SpaceResource media type instance.
func (mt *SpaceResource) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeSpaceResource decodes the SpaceResource instance encoded in resp body.
func (c *Client) DecodeSpaceResource(resp *http.Response) (*SpaceResource, error) {
	var decoded SpaceResource
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// The status of the current running instance (default view)
//
// Identifier: application/vnd.status+json; view=default
type Status struct {
	// The time when built
	BuildTime string `form:"buildTime" json:"buildTime" xml:"buildTime"`
	// Commit SHA this build is based on
	Commit string `form:"commit" json:"commit" xml:"commit"`
	// The error if any
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// The time when started
	StartTime string `form:"startTime" json:"startTime" xml:"startTime"`
}

// Validate validates the Status media type instance.
func (mt *Status) Validate() (err error) {
	if mt.Commit == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "commit"))
	}
	if mt.BuildTime == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "buildTime"))
	}
	if mt.StartTime == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "startTime"))
	}
	return
}

// DecodeStatus decodes the Status instance encoded in resp body.
func (c *Client) DecodeStatus(resp *http.Response) (*Status, error) {
	var decoded Status
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// User Update (default view)
//
// Identifier: application/vnd.updateuser+json; view=default
type UpdateUser struct {
	Data *UpdateUserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the UpdateUser media type instance.
func (mt *UpdateUser) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeUpdateUser decodes the UpdateUser instance encoded in resp body.
func (c *Client) DecodeUpdateUser(resp *http.Response) (*UpdateUser, error) {
	var decoded UpdateUser
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of user idenitity IDs for updating list of user IDs (default view)
//
// Identifier: application/vnd.updateuseridlist+json; view=default
type UpdateUserIDList struct {
	Data []*UpdateUserID `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the UpdateUserIDList media type instance.
func (mt *UpdateUserIDList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUpdateUserIDList decodes the UpdateUserIDList instance encoded in resp body.
func (c *Client) DecodeUpdateUserIDList(resp *http.Response) (*UpdateUserIDList, error) {
	var decoded UpdateUserIDList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// User Identity (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	Data *UserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeUser decodes the User instance encoded in resp body.
func (c *Client) DecodeUser(resp *http.Response) (*User, error) {
	var decoded User
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// User Array (default view)
//
// Identifier: application/vnd.user-array+json; view=default
type UserArray struct {
	Data []*UserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the UserArray media type instance.
func (mt *UserArray) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserArray decodes the UserArray instance encoded in resp body.
func (c *Client) DecodeUserArray(resp *http.Response) (*UserArray, error) {
	var decoded UserArray
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a user list request (default view)
//
// Identifier: application/vnd.userlist+json; view=default
type UserList struct {
	Data []*UserData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks  `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *UserListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the UserList media type instance.
func (mt *UserList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserList decodes the UserList instance encoded in resp body.
func (c *Client) DecodeUserList(resp *http.Response) (*UserList, error) {
	var decoded UserList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
