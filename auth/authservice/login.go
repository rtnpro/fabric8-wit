// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "auth": login Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit/auth
// --pkg=authservice
// --version=v1.2.0

package authservice

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// LoginLoginPath computes a request path to the login action of login.
func LoginLoginPath() string {

	return fmt.Sprintf("/api/login")
}

// Login user
func (c *Client) LoginLogin(ctx context.Context, path string, link *bool, redirect *string) (*http.Response, error) {
	req, err := c.NewLoginLoginRequest(ctx, path, link, redirect)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginLoginRequest create the request corresponding to the login action endpoint of the login resource.
func (c *Client) NewLoginLoginRequest(ctx context.Context, path string, link *bool, redirect *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if link != nil {
		tmp2 := strconv.FormatBool(*link)
		values.Set("link", tmp2)
	}
	if redirect != nil {
		values.Set("redirect", *redirect)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
