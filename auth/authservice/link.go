// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "auth": link Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --notool=true
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit/auth
// --pkg=authservice
// --version=v1.2.0

package authservice

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CallbackLinkPath computes a request path to the callback action of link.
func CallbackLinkPath() string {

	return fmt.Sprintf("/api/link/callback")
}

// Callback from Keyckloak when Identity Provider account successfully linked to the user account
func (c *Client) CallbackLink(ctx context.Context, path string, next *string, sessionState *string, state *string) (*http.Response, error) {
	req, err := c.NewCallbackLinkRequest(ctx, path, next, sessionState, state)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCallbackLinkRequest create the request corresponding to the callback action endpoint of the link resource.
func (c *Client) NewCallbackLinkRequest(ctx context.Context, path string, next *string, sessionState *string, state *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if next != nil {
		values.Set("next", *next)
	}
	if sessionState != nil {
		values.Set("sessionState", *sessionState)
	}
	if state != nil {
		values.Set("state", *state)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// LinkLinkPath computes a request path to the link action of link.
func LinkLinkPath() string {

	return fmt.Sprintf("/api/link")
}

// Link an Identity Provider account to the user account
func (c *Client) LinkLink(ctx context.Context, path string, provider *string, redirect *string) (*http.Response, error) {
	req, err := c.NewLinkLinkRequest(ctx, path, provider, redirect)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLinkLinkRequest create the request corresponding to the link action endpoint of the link resource.
func (c *Client) NewLinkLinkRequest(ctx context.Context, path string, provider *string, redirect *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if provider != nil {
		values.Set("provider", *provider)
	}
	if redirect != nil {
		values.Set("redirect", *redirect)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// SessionLinkPath computes a request path to the session action of link.
func SessionLinkPath() string {

	return fmt.Sprintf("/api/link/session")
}

// Link an Identity Provider account to the user account represented by user's session. This endpoint is to be used for auto linking during login.
func (c *Client) SessionLink(ctx context.Context, path string, provider *string, redirect *string, sessionState *string) (*http.Response, error) {
	req, err := c.NewSessionLinkRequest(ctx, path, provider, redirect, sessionState)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSessionLinkRequest create the request corresponding to the session action endpoint of the link resource.
func (c *Client) NewSessionLinkRequest(ctx context.Context, path string, provider *string, redirect *string, sessionState *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if provider != nil {
		values.Set("provider", *provider)
	}
	if redirect != nil {
		values.Set("redirect", *redirect)
	}
	if sessionState != nil {
		values.Set("sessionState", *sessionState)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
